const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const nodemailer = require('nodemailer');
require('dotenv').config();

const app = express();
const PORT = 3000;

// T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
const fs = require('fs');
if (!fs.existsSync('./data')) fs.mkdirSync('./data');

// K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
const db = new sqlite3.Database('./data/database.db');
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS registrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    phone TEXT,
    email TEXT,
    childName TEXT,
    childAge TEXT,
    message TEXT,
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
    // T·∫°o b·∫£ng h·ªçc sinh
  db.run(`CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    ageGroup TEXT,
    className TEXT,
    status TEXT DEFAULT 'active',
    enrolledAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

    // B·∫£ng l·ªõp h·ªçc
  db.run(`CREATE TABLE IF NOT EXISTS classes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    teacher TEXT,
    studentCount INTEGER DEFAULT 0
  )`);

  // B·∫£ng gi√°o vi√™n
  db.run(`CREATE TABLE IF NOT EXISTS teachers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    position TEXT,
    joinedAt DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);
 });


// C·∫•u h√¨nh
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// Routes
app.get('/', (req, res) => res.render('index', { activePage: 'trang-chu' }));
app.get('/tuyen-sinh', (req, res) => res.render('tuyen-sinh', { activePage: 'tuyen-sinh' }));
app.get('/cong-khai', (req, res) => res.render('cong-khai', { activePage: 'cong-khai' }));
app.get('/thong-ke', (req, res) => res.render('thong-ke', { activePage: 'thong-ke' }));
app.get('/lien-he', (req, res) => res.render('lien-he', { activePage: 'lien-he' }));

// Gi·ªõi thi·ªáu
app.get('/gioi-thieu-chung', (req, res) => res.render('gioi-thieu-chung', { activePage: 'gioi-thieu' }));
app.get('/co-so-vat-chat', (req, res) => res.render('co-so-vat-chat', { activePage: 'gioi-thieu' }));
app.get('/doi-ngu-giao-vien', (req, res) => res.render('doi-ngu-giao-vien', { activePage: 'gioi-thieu' }));
app.get('/quan-diem-giao-duc', (req, res) => res.render('quan-diem-giao-duc', { activePage: 'gioi-thieu' }));
app.get('/muc-tieu-dao-tao', (req, res) => res.render('muc-tieu-dao-tao', { activePage: 'gioi-thieu' }));


// PH·∫¶N N√ÄY X·ª¨ L√ù C√ÅC TAB NH·ªé NH∆Ø B√â ...
// --- Route cho trang chi ti·∫øt b√†i vi·∫øt ---
app.get('/bai-viet-chi-tiet', (req, res) => {
  try {
    const baiVietId = req.query.id; // L·∫•y ID t·ª´ query parameter ?id=...

    if (!baiVietId) {
      return res.status(400).send('Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: Thi·∫øu ID b√†i vi·∫øt.');
    }

    // --- PH·∫¶N M√î PH·ªéNG D·ªÆ LI·ªÜU B√ÄI VI·∫æT ---
    // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω truy v·∫•n c∆° s·ªü d·ªØ li·ªáu ·ªü ƒë√¢y.
    const duLieuBaiViet = {
      'khoi-la-tuan-1': {
        tieu_de: 'Kh·ªëi L√° - Tu·∫ßn 1: ƒê·ªì d√πng, Trang ph·ª•c h·ªçc sinh l·ªõp M·ªôt',
        noi_dung: `<p>Ch√†o m·ª´ng tu·∫ßn h·ªçc m·ªõi!</p>
                   <p><strong>Ch·ªß ƒë·ªÅ:</strong> Tr∆∞·ªùng Ti·ªÉu h·ªçc (2 tu·∫ßn)</p>
                   <p><strong>Tu·∫ßn 1:</strong> ƒê·ªì d√πng, trang ph·ª•c h·ªçc sinh l·ªõp M·ªôt (t·ª´ 12/05 ƒë·∫øn 16/05/2025)</p>
                   <h3>Chi ti·∫øt ho·∫°t ƒë·ªông trong tu·∫ßn:</h3>
                   <ul>
                     <li><strong>Th·ª© Hai:</strong> H∆∞·ªõng d·∫´n tr·∫ª l√†m quen v·ªõi ƒë·ªì d√πng h·ªçc t·∫≠p, h·ªçc c√°ch b·∫£o qu·∫£n ƒë·ªì d√πng.</li>
                     <li><strong>Th·ª© Ba:</strong> Th·∫£o lu·∫≠n v·ªÅ trang ph·ª•c ph√π h·ª£p khi ƒëi h·ªçc l·ªõp M·ªôt, tr√≤ ch∆°i ƒë√≥ng vai "T√¥i ƒëi h·ªçc".</li>
                     <li><strong>Th·ª© T∆∞:</strong> V·∫Ω tranh v·ªÅ h√¨nh ·∫£nh m√¨nh khi ƒëi h·ªçc l·ªõp M·ªôt.</li>
                     <li><strong>Th·ª© NƒÉm:</strong> Ca m√∫a ch·ªß ƒë·ªÅ "T√¥i y√™u m√°i tr∆∞·ªùng m·∫ßm non".</li>
                     <li><strong>Th·ª© S√°u:</strong> T·ªïng k·∫øt tu·∫ßn, nh·∫≠n x√©t.</li>
                   </ul>
                   <blockquote>M·ª•c ti√™u tu·∫ßn n√†y l√† gi√∫p c√°c b√© chu·∫©n b·ªã t√¢m l√Ω v√† ki·∫øn th·ª©c c∆° b·∫£n cho vi·ªác l√†m quen v·ªõi m√¥i tr∆∞·ªùng l·ªõp M·ªôt.</blockquote>`,
        ngay_dang: '25/07/2025',
        tac_gia: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        hinh_anh: '/images/khoi-la-tuan-1.jpg'
      },
      'thuc-don-tuan-1': {
        tieu_de: 'Th·ª±c ƒë∆°n tu·∫ßn 1 (12/05 - 16/05/2025)',
        noi_dung: `<p>Th·ª±c ƒë∆°n tu·∫ßn n√†y ƒë∆∞·ª£c x√¢y d·ª±ng ƒë·∫£m b·∫£o dinh d∆∞·ª°ng, ƒëa d·∫°ng v√† h·∫•p d·∫´n cho c√°c b√©.</p>
                   <h3>Chi ti·∫øt c√°c b·ªØa ƒÉn:</h3>
                   <ul>
                     <li>
                       <strong>Th·ª© 2:</strong> C∆°m, th·ªãt kho, rau lu·ªôc, canh b√≠. Tr√°ng mi·ªáng: Chu·ªëi.
                       <em>(Gi√†u protein, vitamin, ch·∫•t x∆°)</em>
                     </li>
                     <li>
                       <strong>Th·ª© 3:</strong> M√¨ x√†o, ch·∫£ gi√≤, canh chua. Tr√°ng mi·ªáng: Cam.
                       <em>(Cung c·∫•p nƒÉng l∆∞·ª£ng, vitamin C)</em>
                     </li>
                     <li>
                       <strong>Th·ª© 4:</strong> C∆°m, c√° kho, rau x√†o, canh c·∫£i. Tr√°ng mi·ªáng: S·ªØa chua.
                       <em>(Canxi, DHA cho s·ª± ph√°t tri·ªÉn x∆∞∆°ng v√† tr√≠ n√£o)</em>
                     </li>
                     <li>
                       <strong>Th·ª© 5:</strong> B√∫n b√≤, rau s·ªëng. Tr√°ng mi·ªáng: D∆∞a h·∫•u.
                       <em>(Thanh m√°t, d·ªÖ ti√™u h√≥a)</em>
                     </li>
                     <li>
                       <strong>Th·ª© 6:</strong> C∆°m, g√† x√†o s·∫£ ·ªõt, canh b·∫ßu. Tr√°ng mi·ªáng: B√°nh Flan.
                       <em>(Ch·∫•t ƒë·∫°m t·ª´ th·ªãt gia c·∫ßm, vitamin t·ª´ rau)</em>
                     </li>
                   </ul>
                   <p><strong>L∆∞u √Ω:</strong> Th·ª±c ƒë∆°n c√≥ th·ªÉ thay ƒë·ªïi linh ho·∫°t theo m√πa v√† t√¨nh h√¨nh th·ª±c t·∫ø. Nh√† tr∆∞·ªùng cam k·∫øt s·ª≠ d·ª•ng nguy√™n li·ªáu t∆∞∆°i ngon, ƒë·∫£m b·∫£o v·ªá sinh an to√†n th·ª±c ph·∫©m.</p>`,
        ngay_dang: '09/05/2025',
        tac_gia: 'B·∫øp tr∆∞·ªüng',
        hinh_anh: '/images/thuc-don-tuan-1.jpg'
      },
      'meo-giao-tiep': {
        tieu_de: 'üó£Ô∏è M·∫πo giao ti·∫øp hi·ªáu qu·∫£ v·ªõi con',
        noi_dung: `<p>Giao ti·∫øp hi·ªáu qu·∫£ v·ªõi con l√† ch√¨a kh√≥a ƒë·ªÉ x√¢y d·ª±ng m·ªëi quan h·ªá th√¢n thi·∫øt v√† hi·ªÉu con h∆°n. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë m·∫πo gi√∫p ba m·∫π d·ªÖ d√†ng k·∫øt n·ªëi v·ªõi b√©:</p>
                   <h3>1. L·∫Øng nghe t√≠ch c·ª±c</h3>
                   <p>Khi con n√≥i, h√£y d√†nh s·ª± ch√∫ √Ω ho√†n to√†n cho con. Tr√°nh v·ª´a nghe ƒëi·ªán tho·∫°i hay xem TV. Nh√¨n v√†o m·∫Øt con, g·∫≠t ƒë·∫ßu v√† ph·∫£n h·ªìi l·∫°i ƒë·ªÉ con bi·∫øt b·∫°n ƒëang l·∫Øng nghe.</p>
                   <h3>2. D√πng ng√¥n ng·ªØ c∆° th·ªÉ</h3>
                   <p>M·ªâm c∆∞·ªùi, c√∫i ng∆∞·ªùi xu·ªëng ngang t·∫ßm v·ªõi con, ch·∫°m nh·∫π tay ho·∫∑c √¥m con khi c·∫ßn thi·∫øt. Nh·ªØng h√†nh ƒë·ªông n√†y gi√∫p con c·∫£m th·∫•y ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† an to√†n.</p>
                   <h3>3. ƒê·∫∑t c√¢u h·ªèi m·ªü</h3>
                   <p>Thay v√¨ h·ªèi "Con c√≥ vui kh√¥ng?", h√£y h·ªèi "Con th√≠ch nh·∫•t ƒëi·ªÅu g√¨ h√¥m nay?". C√¢u h·ªèi m·ªü khuy·∫øn kh√≠ch con chia s·∫ª nhi·ªÅu h∆°n.</p>
                   <h3>4. Tr√°nh ph√°n x√©t</h3>
                   <p>Khi con chia s·∫ª, h√£y tr√°nh ph·∫£n ·ª©ng ti√™u c·ª±c ho·∫∑c la m·∫Øng ngay l·∫≠p t·ª©c. H√£y c·ªë g·∫Øng hi·ªÉu suy nghƒ© c·ªßa con tr∆∞·ªõc.</p>
                   <h3>5. D√†nh th·ªùi gian ch·∫•t l∆∞·ª£ng</h3>
                   <p>D√†nh th·ªùi gian ch∆°i c√πng con, ƒë·ªçc s√°ch c√πng con m·ªói ng√†y. ƒê√¢y l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ giao ti·∫øp v√† g·∫Øn b√≥.</p>`,
        ngay_dang: '15/05/2025',
        tac_gia: 'Ban t∆∞ v·∫•n ph·ª• huynh',
        hinh_anh: '/images/meo-giao-tiep.jpg'
      },
      'khoi-la-tuan-3': {
        tieu_de: 'Kh·ªëi L√° - Tu·∫ßn 3: B√°c H·ªì k√≠nh y√™u',
        noi_dung: `<p><strong>Ch·ªß ƒë·ªÅ:</strong> Qu√™ H∆∞∆°ng - Th·ªß ƒë√¥ B·∫Øc Ninh (3 tu·∫ßn)</p>
                   <p><strong>Tu·∫ßn 3:</strong> B√°c H·ªì k√≠nh y√™u (t·ª´ ng√†y 05/05 ƒë·∫øn 09/05/2025)</p>
                   <h3>Chi ti·∫øt ho·∫°t ƒë·ªông trong tu·∫ßn:</h3>
                   <ul>
                     <li><strong>Th·ª© Hai:</strong> K·ªÉ chuy·ªán "B√°c H·ªì v√† nh·ªØng ch√∫ b√© kh√¥ng √°o". Tr√≤ ch∆°i v·∫≠n ƒë·ªông "Ai nhanh h∆°n".</li>
                     <li><strong>Th·ª© Ba:</strong> H·ªçc h√°t "Ca ng·ª£i T·ªï qu·ªëc". V·∫Ω tranh B√°c H·ªì.</li>
                     <li><strong>Th·ª© T∆∞:</strong> Xem phim ho·∫°t h√¨nh ng·∫Øn v·ªÅ B√°c H·ªì. Th·∫£o lu·∫≠n nh√≥m.</li>
                     <li><strong>Th·ª© NƒÉm:</strong> ƒê√≥ng vai "B√°c H·ªì trong l·ªõp h·ªçc". H·ªçc thu·ªôc th∆° v·ªÅ B√°c.</li>
                     <li><strong>Th·ª© S√°u:</strong> T·ªïng k·∫øt tu·∫ßn. Tri·ªÉn l√£m tranh v·∫Ω B√°c H·ªì.</li>
                   </ul>
                   <blockquote>Tu·∫ßn n√†y gi√∫p c√°c b√© hi·ªÉu th√™m v·ªÅ B√°c H·ªì, h√¨nh ·∫£nh ng∆∞·ªùi cha gi√† c·ªßa d√¢n t·ªôc, nu√¥i d∆∞·ª°ng t√¨nh y√™u ƒë·∫•t n∆∞·ªõc.</blockquote>`,
        ngay_dang: '08/05/2025',
        tac_gia: 'Th·∫ßy Nguy·ªÖn VƒÉn A',
        hinh_anh: '/images/khoi-la-tuan-3.jpg'
      }
      // --- Th√™m d·ªØ li·ªáu cho c√°c ID kh√°c ·ªü ƒë√¢y ---
    };
    // --- H·∫æT PH·∫¶N M√î PH·ªéNG D·ªÆ LI·ªÜU ---

    const baiViet = duLieuBaiViet[baiVietId];

    if (!baiViet) {
      // Tr·∫£ v·ªÅ trang l·ªói 404 n·∫øu kh√¥ng t√¨m th·∫•y b√†i vi·∫øt
      // Gi·∫£ ƒë·ªãnh b·∫°n c√≥ template error.ejs
      return res.status(404).render('error', {
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt.',
        error: { status: 404 },
        activePage: 'trang-chu' // Th√™m activePage
      });
    }

    // Render trang chi ti·∫øt v·ªõi d·ªØ li·ªáu b√†i vi·∫øt
    // S·ª≠ d·ª•ng template 'chi-tiet-bai-viet.ejs'
    res.render('chi-tiet-bai-viet', {
      activePage: 'trang-chu', // Ho·∫∑c trang ph√π h·ª£p
      baiViet: baiViet // Truy·ªÅn d·ªØ li·ªáu b√†i vi·∫øt v√†o template
    });

  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu chi ti·∫øt b√†i vi·∫øt:", error);
    res.status(500).send('ƒê√£ x·∫£y ra l·ªói tr√™n m√°y ch·ªß.');
  }
});
// --- K·∫øt th√∫c Route cho trang chi ti·∫øt b√†i vi·∫øt ---



// X·ª≠ l√Ω form
app.post('/register', (req, res) => {
  const { name, phone, email, childName, childAge, message } = req.body;
  const stmt = db.prepare(`INSERT INTO registrations (name, phone, email, childName, childAge, message) VALUES (?, ?, ?, ?, ?, ?)`);
  stmt.run(name, phone, email, childName, childAge, message);
  stmt.finalize();

  // G·ª≠i email x√°c nh·∫≠n (n·∫øu c√≥ .env)
  if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω Sunflower Kids!',
      text: `Xin ch√†o ${name}!\nC·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá trong 24h.\n\nSunflower Kids`
    };
    transporter.sendMail(mailOptions, (err) => {
      if (err) console.log("L·ªói g·ª≠i email:", err);
    });
  }

  res.send(`
    <div style="text-align:center; padding:100px; font-family:'Comic Sans MS', cursive; background:#fffaf7;">
      <h2 style="color:#27ae60;">üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!</h2>
      <p>C·∫£m ∆°n b·∫°n, <strong>${name}</strong>! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i s·ªõm.</p>
      <a href="/tuyen-sinh" style="color:#e67e22; text-decoration:none; font-weight:bold;">‚Üê Quay l·∫°i</a>
    </div>
  `);
});

// Admin: Xem danh s√°ch
app.get('/admin', (req, res) => {
  db.all(`SELECT * FROM registrations ORDER BY createdAt DESC`, (err, rows) => {
    if (err) return res.send("L·ªói");
    let html = `
      <div style="padding:30px; font-family:Arial;">
        <h1 style="color:#d35400;">üìã Danh s√°ch ƒëƒÉng k√Ω</h1>
        <a href="/" style="color:#3498db; text-decoration:none;">‚Üê Trang ch·ªß</a>
        <table border="1" cellpadding="10" style="width:100%; margin-top:20px; border-collapse:collapse;">
          <tr style="background:#f8f9fa;">
            <th>ID</th><th>Ph·ª• huynh</th><th>SƒêT</th><th>Email</th><th>T√™n b√©</th><th>Tu·ªïi</th><th>Th·ªùi gian</th>
          </tr>
    `;
    rows.forEach(r => {
      html += `<tr>
        <td>${r.id}</td>
        <td>${r.name}</td>
        <td>${r.phone}</td>
        <td>${r.email || ''}</td>
        <td>${r.childName}</td>
        <td>${r.childAge}</td>
        <td>${r.createdAt}</td>
      </tr>`;
    });
    html += `</table></div>`;
    res.send(html);
  });
});

app.listen(PORT, () => {
  console.log(`\nüöÄ Server ƒëang ch·∫°y t·∫°i: http://localhost:${PORT}`);
  console.log(`üìå Truy c·∫≠p:`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/tuyen-sinh`);
  console.log(`   ‚Ä¢ http://localhost:${PORT}/admin`);
  console.log(`\nüí° D·ª´ng server: Nh·∫•n Ctrl + C\n`);
});

app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// ‚úâÔ∏è X·ª≠ l√Ω form Li√™n h·ªá
app.post('/contact', (req, res) => {
  const { name, email, phone, message } = req.body;

  // 1. G·ª≠i mail ƒë·∫øn b·∫°n (qu·∫£n tr·ªã vi√™n)
  if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    // Mail g·ª≠i ƒë·∫øn b·∫°n
    const mailToAdmin = {
      from: email,
      to: process.env.EMAIL_USER,
      subject: `üì© Li√™n h·ªá m·ªõi t·ª´ ${name}`,
      text: `
        H·ªç t√™n: ${name}
        Email: ${email}
        SƒêT: ${phone || 'Kh√¥ng c√≥'}
        Tin nh·∫Øn: ${message}
        
        Th·ªùi gian: ${new Date().toLocaleString()}
      `
    };

    // Mail t·ª± ƒë·ªông tr·∫£ l·ªùi (auto-reply)
    const mailToUser = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi Sunflower Kids!',
      html: `
        <h2>Xin ch√†o ${name}!</h2>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi <strong>Sunflower Kids</strong>.</p>
        <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n v√† s·∫Ω ph·∫£n h·ªìi trong v√≤ng <strong>24 gi·ªù</strong>.</p>
        <p>N·∫øu c·∫ßn g·∫•p, vui l√≤ng g·ªçi: <strong>0901 234 567</strong></p>
        <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© Sunflower Kids</strong></p>
      `
    };

    // G·ª≠i c·∫£ 2 email
    transporter.sendMail(mailToAdmin, (err, info) => {
      if (err) console.log("L·ªói g·ª≠i mail ƒë·∫øn admin:", err);
      else console.log("Mail ƒë·∫øn admin ƒë√£ g·ª≠i:", info.response);
    });

    transporter.sendMail(mailToUser, (err, info) => {
      if (err) console.log("L·ªói t·ª± ƒë·ªông tr·∫£ l·ªùi:", err);
      else console.log("T·ª± ƒë·ªông tr·∫£ l·ªùi ƒë√£ g·ª≠i:", info.response);
    });
  }

  // Tr·∫£ v·ªÅ trang c·∫£m ∆°n
  res.send(`
    <div style="text-align: center; padding: 100px; font-family: 'Comic Sans MS', cursive;">
      <h2 style="color: #27ae60;">‚úÖ G·ª≠i th√†nh c√¥ng!</h2>
      <p>C·∫£m ∆°n b·∫°n, <strong>${name}</strong>! Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn.</p>
      <p>M·ªôt email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn <strong>${email}</strong>.</p>
      <a href="/lien-he" style="color: #e67e22; text-decoration: none; font-weight: bold;">‚Üê G·ª≠i th√™m tin nh·∫Øn</a>
    </div>
  `);
});


// üî¢ API: L·∫•y s·ªë li·ªáu th·ªëng k√™ chuy√™n nghi·ªáp
app.get('/api/stats', (req, res) => {
  const data = {};

  // 1. T·ªïng h·ªçc sinh
  db.get(`SELECT COUNT(*) as count FROM students`, (err, row) => {
    if (err) return res.status(500).send("L·ªói database");
    data.totalStudents = row.count;

    // 2. H·ªçc sinh theo ƒë·ªô tu·ªïi
    db.all(`SELECT ageGroup, COUNT(*) as count FROM students GROUP BY ageGroup`, (err, rows) => {
      if (err) return res.status(500).send("L·ªói database");
      data.ageGroups = rows.map(r => ({ label: r.ageGroup, value: r.count }));

      // 3. T√¨nh tr·∫°ng h·ªçc t·∫≠p
      db.all(`SELECT status, COUNT(*) as count FROM students GROUP BY status`, (err, rows) => {
        if (err) return res.status(500).send("L·ªói database");
        data.studentStatus = rows.map(r => ({ label: r.status, value: r.count }));

        // 4. S·ªë l·ªõp h·ªçc
        db.get(`SELECT COUNT(*) as count FROM classes`, (err, row) => {
          if (err) return res.status(500).send("L·ªói database");
          data.totalClasses = row.count;

          // 5. S·ªë gi√°o vi√™n
          db.get(`SELECT COUNT(*) as count FROM teachers`, (err, row) => {
            if (err) return res.status(500).send("L·ªói database");
            data.totalTeachers = row.count;

            // 6. T·ª∑ l·ªá gi√°o vi√™n / h·ªçc sinh
            data.ratio = data.totalTeachers > 0 
              ? (data.totalStudents / data.totalTeachers).toFixed(1)
              : "0";

            // G·ª≠i d·ªØ li·ªáu v·ªÅ frontend
            res.json(data);
          });
        });
      });
    });
  });
});